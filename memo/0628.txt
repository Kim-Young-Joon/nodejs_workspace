** 값 가져오기
1. URL을 통해서 파라미터의 키와 값들이 보이는 경우
    http://127.0.0.1:4000/person?name=Tom&age=11&phone=010-0000-0000
    request.query.name; request.query.age; 의 형태로 받아오면 된다.
    ** query 를 이용 (별도의 선언 없이 http 모듈의 request 객체를 이용하여 사용가능)

2. 정확히 키/값 형태로 확인이 불가한 경우
    http://127.0.0.1:4000/person/Tom/11/010-0000-0001
        /person/:name/:age/:phone 의 형태의 url인 경우 (키 값이 무엇인지를 url만 가지고는 확인하기 힘듦)
    request.params.name; request.params.age; 의 형태로 받아온다.
    ** query와 마찬가지로 별도의 선언없이 http 모듈의 request 객체를 통해서 사용 가능

3. post 방식으로 전송하는 경우
    request.body.[key값]; 의 형태로 가져올 수 있다.
    ** 역시 마찬가지로 request 객체에 있는 body를 이용하는 것

--------------------------------------------------------------------------------------------------------

미들웨어 : 클라이언트에게 요청이 오고, 그 요청을 보내기 위해 응답하려는 중간(미들)에 목적에 맞게 처리를 하는,
    말하자면 거쳐가는 함수들
    ** next() : 다음 미들웨어로의 엑세스 함수
        - 파라미터를 포함할 수 없다.
        - 이를 통해 다음 함수로의 이동을 하게 된다.

미들웨어의 특징
    모든 코드를 실행
    다음 미들웨어 호출(미들웨어가 순차적으로 실행)
    res, req 객체 변경 가능
    요청-응답 주기를 종료(response methods를 이용)

express middleware 유형
    1. 어플리케이션 레벨 미들웨어
    - use 뿐 아니라 get, post 에서도 사용 가능하다
        * use 는 어떠한 방식으로 오던지 호출되는 형태의 함수이고
        get은 get 방식으로 전송된 경우에, post는 post 방식으로 전송된 경우에 호출되는 함수이다.
    - use, get, post 모두 (함수) or (url, 함수 형태)
        함수에 원하는 동작을 기술해두면 해당 방식으로 해당 url로의 접근이 있을 때, 수행된다.

    2. 라우터 레벨 미들웨어
    - 라우터 객체를 선언하고 난 이후는 위와 거의 유사하다
        let express = require('express');
        let router = express.Router();
    - 라우터 객체 선언한 이후 메서드 활용해서 설정
        router.get("/list", (request, response)=>{});
        router.post("/list", (request, response)=>{});

    3. 오류 처리(에러 핸들링) 미들웨어
    - 에러 핸들링을 하는 미들웨어는 4개의 인자를 사용해서 정의
        (err, req, res, next)
    4. 써드파티 미들웨어

--------------------------------------------------------------------------------------------------------

request.body로 값을 읽으려면 app.use(express.urlencoded({extended:false})); 가 설정되어야 한다.

path 모듈은 경로 관리, join은 결합
변수중에 __(언더바 두개)로 시작하는 변수나 함수는 내장변수, 혹은 내장 함수이다.

쿠키 사용을 위한 미들웨어 : app.use(cookieParser());

--------------------------------------------------------------------------------------------------------

쿠키
설치 : npm install cookie-parser
쿠키 미들웨어 설정하기
    let app = express();
    app.use(cookieParser());

쿠키 : 사용자 공간(클라이언트 컴퓨터)에 정보를 저장한다.
세션 : 서버 공간(서버 컴퓨터)에 로그온하면 계속 유지시켜준다. - 세션 저장소(DB)와 연결한다.
    세션에는 너무 많은 정보 저장 X - 서버 자원을 많이 사용한다

response 객체가 cookie 라는 함수를 갖고 있고 이 함수를 통해 쿠키에 정보를 저장한다.

쿠키 값을 읽을 때는 클라이언트로부터 받아와야 하므로 request 객체를 통해 읽는다.

key는 String 이지만, 값은 객체도 저장 가능
    res.cookie("key1", "test"); 
    res.cookie("key2", {
        userid: "test1234",
        username: "홍길동"
    });

let key1 = req.cookies.[키값];

--------------------------------------------------------------------------------------------------------

DBMS(DataBase Management System)
    - 오라클 : 테라바이트 이상의 데이터 처리 가능, 빅데이터 처리 가능
        -> 대부분의 기업체나 국가 기관들은 오라클 사용
        - 사용하는 기간 내내 돈을 내야 한다.
        - 상업적 서비스를 실행하기 전까지는 오라클 정식 버전을 사용해도 불법이 아님
        - 익스프레스 버전은 정식 오라클 버전의 맛보기인데 튜닝 쪽으로 가지 않는 이상 크게 지장 없다.
        - 정식버전도 30~40분 이내에 설치 가능 (네트워크에 별다른 문제가 없다면)
    - MySQL : 무료였음 -> 회사가 오라클사에 팔림 -> 오라클사에 라이센스가 있다.
        - Community 버전을 다운 받아 설치해서 사용하고, 그래픽을 지원하는 클라이언트 프로그램도 있음(MySQL Workbench)
        - 상업적 서비스를 시작하면서 돈을 내야 한다.
    - MariaDB : MySQL 만들던 사람들끼리 모여서 만든 DB
        - 여전히 무료
        - 쿼리나 내부 함수가 오라클 보다 쉽다.
        - 데이터 많아지면 엄청 느림
        - MariaDB를 깔고 MySQL Workbench를 설치하면 포트번호 설정에 따라 워크벤치가 MariaDB를 가져오는 경우도 있다.
            (그만큼 유사하다는 의미)
    - MSSQL : Microsoft SQL
        - 비주얼 도구 제공
        - 쿼리 만들기 쉬움

DBMS 제어 툴
    - SQLGate : 개인 용 freeware를 지원한다.
        (오라클, MySQL, MSSQL)
    - HeidiSQL : MySQL 용 그래픽 툴(맥북용 지원 안함), 무료
        (MySQL만 지원)
    - phpMyAdmin : 웹 사이트로 MariaDB를 접근하게 해준다
        보통 호스팅 업체들이 제일 많이 사용한다.
    - XAMPP 프로그램 -> 아파치서버, php 서버, 톰캣, MySQL, phpMyAdmin 한번에 설치