MongoDB - NoSQL DB(SQL 쿼리 사용 X)
    * primary key, foreign key 없음
    * tabele, record 없음
    => 비슷한 개념으로 collection, document 존재
    - data를 json으로 사용하기 때문에 nodejs/python 와 굉장히 잘 맞다
    - java랑은 안맞다

초기 과정
    1. 설치
    2. 환경변수 설정 (bin 폴더 위치 추가해주기)
    3. 폴더 만들기 (C:/data/db) - 데이터 들어갈 경로 만들어 주는 용도
    4. 서버 작동시키기 : mongod
    5. 서버와 통신 시작 : mongo
    이후 원하는 명령을 내리면 된다.

명령
    - 모든 [DB, Collection] 보기 : show [dbs, collections]
    - DB 사용 명령어 : use [DB명] (없으면 알아서 만들어 줌)
    - DB 삭제 명령어 : db.dropDatabase()
    - Collection 추가하기 : db.createCollection('[collection 명]')
    - 데이터 추가하기 : db.<컬렉션명>.insert(<json>)
        ex) db.person.insert({'name':'홍길동', 'age':26, 'gender':'m'})
    - 데이터 검색 : db.<컬렉션명>.find() / db.<컬렉션명>.find(<json>)
        두가지 방법이 있는데, 첫번째는 모든 것을 보여주고, 두번째는 매개변수로 조건을 넣어주면
        해당 조건에 맞는 데이터가 나오게 된다.
        ex) db.person.find({'name':'홍길동'})
    - 데이터 수정 : db.<컬렉션명>.update(<json1>,<json2>)
        ex) db.person.update( {'name':'홍길동'},   { $set:{'age':40} } )
    - 데이터 삭제 : db.<컬렉션명>.remove(<json>)
        ex) db.person.remove({'name':'홍길동'})

조건
    $eq	(equals) : 주어진 값과 일치하는 값
    $gt	(greater than) : 주어진 값보다 큰 값
    $gte (greather than or equals) : 주어진 값보다 크거나 같은 값
    $lt	(less than) : 주어진 값보다 작은 값
    $lte (less than or equals) : 주어진 값보다 작거나 같은 값
    $ne	(not equal) : 주어진 값과 일치하지 않는 값
    $in	: 주어진 배열 안에 속하는 값
    $nin : 주어진 배열 안에 속하지 않는 값

조건에는 정규식을 넣을 수 있다.
    참고 : https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Regular_Expressions
    ex) db.person.find({name:/장/}) : '장' 이라는 글자가 이름에 들어간 사람을 모두 찾겠다.
    정규식 패턴에는 따옴표 없이 정규식 형태 그대로 쓰면 된다.
    /x/ : x가 들어간                 db.person.find({name:/장/})
    /^x/ : x로 시작하는              db.person.find({name:/^장/})
    /x$/ : x로 끝나는                db.person.find({name:/장$/})
    /[xy]/ : x 혹은 y를 포함하는     db.person.find( {name:/[장홍]/})
    /[a-zA-Z]/ : 영어를 포함하는
   
    ** ^ 표시가 대괄호 밖에 위치하면 '시작하는'의 의미
               대괄호 내부에 위치하면 '제외하고'의 의미
        db.person.find({name:/^[a-zA-Z]/})

모든 Collection에는 _id 라는 필드가 필수적으로 만들어 진다.
    - MongoDB에서는 MySQL에서의 auto_increment를 제공하지 않는다.
    - _id 필드는 시퀀스 키 이름이라고 생각하면 됨, seq 값은 초기값
    - _id 필드는 값 중복을 허용하지 않고, 값을 직접 부여할 수 있으며, 꼭 숫자일 필요가 없다.
    - db.createCollection('customSequence') 를 해서 collection을 만들고 아래와 같이 쓰게 되면
    seq 값이 계속해서 1씩 증가하게 된다.
    db.customSequence.findAndModify(
        {
            query: {_id:"hero"},
            update: {$inc:{seq:1}},
            new: true
        }
    )

Node.js 와 MongoDB 연동하기
    1. mongoose 설치 : npm install --save mongoose
    2. mongoose module 사용 : let mongoose = require("mongoose");
    3. mongoose 연결 : let db = mongoose.connection;
    4. 접속 : db.once('open', () = {실행 내용});
    ex)
    db.once('open', () => {
        console.log("연결 성공");
        doRead();
    });

    function doRead() {
        db.collection("person").find({}).toArray((err, result) => {
            if(err) throw err;
            console.log(result);
        });
    }
