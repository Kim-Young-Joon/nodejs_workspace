1.  http 모듈
    1. createServer() : http 서버를 생성 (정확히는 서버 객체를 생성한 것임)
    let http = require('http');
    http.createServer((request, response) => {
        /*
        request : 클라이언트에서 요청을 보내는 객체
        response : 서버에서 응답을 보내는 객체
        */
    })
    ** let server = http.createServer(); 과 같은 형태로 server 객체를 생성한 다음 이를 이용하여 이벤트에 대한 함수를 지정해도 된다.
    server.on('request', function() {
        console.log("클라이언트가 요청할 때 발생하는 이벤트");
    });
    2. request 객체
        2-1. request.url : url 모두 읽어 옴
            ** 데이터 활용은 어떤식으로?
            => let query = url.pase(request.url, true).query;
            query.name; // 가지고 온 url에서 파라미터 중 name 이라는 이름을 가지고 있는 값을 찾아서 읽어옴
        2-2. request.on
    3. response 객체 (상태코드 설정 -> 헤더 설정 -> 바디 전송)
        3-1. response.statusCode : 상태코드를 전달 (기본값은 200)
        3-2. response.setHeader() : 응답 헤더에 담을 내용을 저장
        3-3. response.writeHead() : setHeader() 보다 더 명시적인 방식으로 응답 헤더 설정
        3-4. response.write() : 응답 바디 전송 ()
        3-5. response.end() : 응답 종료 (응답 전송을 끝낸다는 의미이며, 매개 변수로 출력하고자 하는 내용을 넣으면
            해당 내용도 포함되어서 출력한 다음 마무리)
        ** 바디 전송 전에 헤더부터 설정해야한다! / 응답 역시 에러 핸들링 해줘야 함
    4. listen() : port 연결 (요청을 실제로 처리)
        4-1. [http 객체].listen(port 번호); // 포트 번호만 넣어도 처리가능
        4-2. 
        [http객체].listen(Port, ip, () ={
            // 서버를 실행하고 callback 함수 실행하는 형태
            // 여기에 원하는 동작(주로 서버 실행 되었다는 설명 문구)을 기술하면 됨
        })

2. url 모듈
    1. url.parse() : 웹 주소를 읽을 수 있는 부분으로 분할
    let url = require('url');
    let q = url.parse(request.url, true); // url 객체에 대한 정보가 나옴
        1-1. q.host : hostname과 포트번호
        1-2. q.pathname : host 이후의 url의 경로부터 파라미터 전까지를 가져옴 
        1-3 : q.search : 전달되는 파라미터들이 url에 나오는 형태로 가져옴 (? 포함해서 출력)

3. fs 모듈
    1. fs.readFile() : 파일을 읽어오는데 사용
    fs.readFile('[경로가 포함된 파일명]', function(error, data) {
        // 파일 읽어와서 처리
        // response.write(data); // 해당 파일 내용을 응답함
    })

4. ejs 모듈
    1. ejs.render
    let server = http.createServer((req, res) => {
        let pathName = url.parse(req.url).pathname;

        fs.readFile("./html/test.html", "utf-8", (error, data) => { // utf-8 적지 않아도 안나온다.
            res.statusCode = 200;
            res.setHeader("Content-type", "text/html");
            // html 파일을 ejs 엔진을 이용해 렌더링 한다.
            // ejs의 render의 첫번째 인자는 파일의 내용
            // 두번째 인자는 JSON 형태로 데이터를 전송한다.

            res.end(ejs.render(data, {
                title: "EJS 엔진을 배워봅시다",
                contents: "JSON 형태로 데이터를 보내주면 html과 결합하여 새로운 문서를 만든다.",
                fruits: ["사과", "배", "거봉", "망고", "참외", "수박"],
                product: [
                    {name:"노트북", price:2000000},
                    {name:"에어컨", price:3500000},
                    {name:"냉장고", price:4000000},
                    {name:"갤럭시", price:1000000}
                ]
            })); // JSON 형태로 데이터를 전송해서, html 문서에서 받아서 사용할 수 있다.
        })
    });

5. jade 모듈

6. express 모듈 : http 모듈처럼 사용할 수 있지만 훨씬 더 많은 기능이 있는 외부모듈
